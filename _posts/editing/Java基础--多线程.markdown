
进程：是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位


每一个进程执行都有一个执行顺序(执行路径，或者叫一个控制单元)






线程：就是进程中的一个独立的控制单元。线程在控制着进程的执行。


一个进程中至少有一个线程。


Java VM  启动的时候会有一个进程java.exe.


该进程中至少一个线程负责java程序的执行。
而且这个线程运行的代码存在于main方法中。
该线程称之为主线程。


扩展：其实更细节说明jvm，jvm启动不止一个线程，还有负责垃圾回收机制的线程




这就是多线程的一个特性：随机性。谁抢到谁执行，至于执行多长，cpu说的算


创建线程
|--第一种方式：继承Thread类
1，定义类继承Thread
2，复写Thread类中的run方法(线程运行run())
3，调用线程的start方法(作用：启动线程，调用run方法)




。


|--第二种方式：实现Runable接口
1，定义类实现Runnable接口
2，覆盖Runnable接口中的run方法(线程运行run())
3，通过Thread类建立线程对象。
4，将Runnable接口的子类对象作为实际参数传递给Thread类的构造函数。
5，调用Thread类的start方法开启线程并调用Runnable接口子类的run()
 【Thread t1 = new Thread(t);】


实现方式VS继承方式


实现方式好处：避免了单继承的局限性。
在定义线程时，建立使用实现方式。


两种方式区别：
继承Thread:线程代码存放Thread子类run方法中。
实现Runnable:线程代码存在接口的子类的run方法。






Java对于多线程的安全问题提供了专业的解决方式→同步代码块：
synchronized(对象)
{
需要被同步的代码
}


同步的前提：
1，必须要有两个或者两个以上的线程
2，必须是多个线程使用同一个锁


必须保证同步中只能有一个线程在运行


好处：解决了多线程的安全问题
弊端：多个线程需要判断锁，较为消耗资源




同步函数使用的锁是this
静态的同步方法，使用的锁是该方法所在类的字节码文件对象(类名.class)

