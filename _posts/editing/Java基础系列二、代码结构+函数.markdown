代码结构
顺序结构
判断结构
选择结构
循环结构
if语句的三种格式
第一种

if(条件表达式) {
    ...;
}
...;

第二种

if(条件表达式) {  
    ...;       
} else {          
    ...;   
}
...;
第三种

if(条件表达式) {
	...;
} else if (条件表达式) {
	...;
} else {
	...;
}   
...;
if语句的嵌套
格式
    int x = 2, y = 1;
    if(x==1) {
        if(y==1) {
            System.out.println("a");
        } else {
            System.out.println("b");
        }
    } else {
        if(y==1){
            System.out.println("c");
        } else {
            System.out.println("d");
        }
    } 
switch
格式

int x = 10;
switch (表达式) { // byte, short, int, char, String, 枚举
case 表达式里对应的值:
    ...;
break;
case 表达式里对应的值:
    ...;
break;
.
.
.
default:
	...;
	break; // 最后一句的break可写可不写
}
while
格式

while (条件表达式) {
    ...;
}
do while 循环

do {
    ...;
    控制循环次数;
}
while (条件表达式);
while 和 do while 的区别：
do while语句会先执行循环体,再去判断条件,也就是说无论条件是否满足他都至少要执行一次循环体,先执行,再判断
while 先判断条件,只要条件不满足就不在执行循环体了,先判断,再执行
for循环语句
格式

for(初始化表达式1；循环条件表达式2；循环后的操作表达式4) {
    ...;(循环体)3
}
循环嵌套(练习99乘法表)
格式
for(初始化表达式; 循环条件表达式; 循环后的操作表达式) { // 这是外层循环
    ...;(循环体)
    // 下面是内循环
    for(初始化表达式; 循环条件表达式; 循环后的操作表达式) {
        ...;(循环体)
    }
}
流程控制 continue 和 break
这两个语句离开应用范围，存在是没有意义的
这两个语句单独存在下面都不可以有语句，因为执行不到
continue语句是结束本次循环继续下次循环
标号的出现，可以让这两个语句作用于指定的范围
函数(也称方法)的概述及格式
函数就是定义在类中的具有特定功能的一段独立小程序
格式
修饰符 返回值类型 函数名(参数类型 形式参数1, 参数类型 形式参数2, …) {
    ...;
    return 返回值;
}
函数的重载
A：函数名相同，参数列表不同[参数顺序不同也算但无意义]
参数类型不同：int add(int i) -- void add(double d)
参数个数不同：add(int a,int b) -- add(int a,int b,int c)
B：特点：与返回值类型无关，只看参数列表
C：好处：便于阅读，优化程序设计