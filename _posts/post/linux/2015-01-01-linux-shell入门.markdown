---
layout:       post
title:        "shell入门"
subtitle:     "简介shell的基础语法，编写入门案例"
date:         2015-01-01 12:00:00
author:       "catface"
header-img:   "img/black-bg.png"
header-mask:  0.3
catalog:      true
multilingual: false
edit status:  ing
tags:
    - linux
---

# shell入门

## shell简介

- shell是一个命令行解释器，它为用户提供了一个向Linux内核发送请求以便裕兴程序的界面系统级程序，用户可以用shell来启动、挂起、停止甚至是编写一些程序

- shell脚本的执行方式：

	- 脚本格式要求：
		
		- 脚本以#!/bin/bash开头
		
		- 脚本需要有可执行权限
	
	- 脚本的常用执行方式：
		
		- 方式1(输入脚本的绝对路径或相对路径)
			
			- 首先要赋予脚本文件的可操作(+x)权限：chmod 744 test_shell.sh
			
			- 执行脚本：./test_shell.sh
		
		- 方式2(sh+脚本)：
			
			- 说明：不用赋予+x权限，直接执行即可
			
			- sh ./test_shell.sh


- 第一个shell编程案例

    ``` shell
    #!/bin/bash
    
    echo "hello world!"
    
    echo "home=$HOME | pwd=$PWD | shell=$SHELL | user=$USER"
    ```

## shell的变量

- shell变量的介绍

	- Linux shell的变量分为，系统变量和用户自定义变量
	
	- 系统变量：$HOME、$PWD、$SHELL、$USER等等
	
	- 显示当前shell中所有变量：set

- shell变量的定义

	- 定义变量：变量=值，=两边不能有空格
	
	- 撤销变量：unset 变量
	
	- 声明静态变量：readonly 变量，注意：不能unset

- 定义变量的规则

	- 变量名称可以由字母、数字和下划线组成，但是不能以数字开头
	
	- 等号两侧不能有空格
	
	- 变量名称一般习惯为大写

- 将命令的返回值赋给变量

	- A=\`ls -la\`这里有反引号(ESC下面)，运行里面的命令，并把结果返回给变量A
	
	- A=$(ls -la)等价于上面

- 设置环境变量

	- export 变量名=变量值：将shell变量输出为环境变量
	
	- source 配置文件：让修改后的配置文件信息立即生效
	
	- echo $变量名：查询环境变量的值
	
	- 多行注释格式：

        ``` shell
        :<<!
        
        需要注释的内容
        
        !
        ```

- 位置参数变量

	- 当我们执行一个shell脚本时，如果希望获取到命令行的参数信息就可以使用到位置参数变量，比如： ./test_shell.sh 100 200，这个就是一个执行shell的命令行，可以在myshell脚本中传参100，200
	
	- 基本语法：
	
		- $n：n为数字，$0代表命令本身，$1-$9代表第一到第九个参数，10以上的参数需要用大括号包含，如${10}
		
		- $*：这个变量代表命令行中所有的参数，$*把所有的参数看成一个整体
		
		- $@：这个变量也代表命令行中所有的参数，不过$@把每个参数区分对待
		
		- $#：这个变量代表命令行中所有参数的个数

- 预定义变量

	- shell设计者事先已经定义好的变量，可以直接在shell脚本中使用
	
	- 基本语法：
	
		- $$：当前进程的进程号(PID)
		
		- $!：后台运行的最后一个进程的进程号(PID)
		
		- $?：最后一次执行的命令的返回状态，如果这个变量的值为0，证明上一个命令正确执行；如果这个变量的值为非- 0(具体是哪个数，由命令自己来决定)，则证明上一个命令执行不正确
		
		- 后台运行：./test_shell.sh &

## 运算符

- 在shell中进行各种运算操作

- "$((运算式))"或"$[运算时]"

- expr m + n，注意expr运算符间要有空格

- expr m - n

- expr \\* / %，乘(注意不是*而是\\\*)，除，取余

## 条件判断及流程控制语句

- 条件判断

	- 基本语法：[ condition ]，注意condition前后有空格
	
	- 非空返回true，可使用$?验证(0为true，>1为false)
	
	- 两个整数比较
	
		- =：字符串比较
		
		- -lt：小于
		
		- -le：小于等于
		
		- -eq：等于
		
		- -gt：大于
		
		- -ge：大于等于
		
		- -ne：不等于
	
	- 按照文件权限进行判断
	
		- -r：有读的权限
		
		- -w：有写的权限
		
		- -x：有执行的权限
	
	- 按照文件类型进行判断
	
		- -f：文件存在并且是一个常规的文件
		
		- -e：文件存在
		
		- -d：文件存在并且是一个目录

- 流程控制if语句

    ``` shell
    # 基本语法
    if [ 条件判断式 ];then
    
    程序
    
    fi
    ```

	---

    ``` shell
    # 多重条件语法
    if [ 条件判断式 ]
    
    ​ then
    
    ​ 程序
    
    elif [ 条件判断式 ]
    
    ​ then
    
    ​ 程序
    
    fi
    ```

- 流程控制case语句

    ``` shell
    case $变量名 in
    
    "值1")
    
    如果变量的值等于值1，则执行程序1
    
    ;;
    
    "值2")
    
    如果变量的值等于值2，则执行程序2
    
    ;;
    
    …省略其他分支…
    
    *)
    
    如果变量的值都不是以上的值，则执行此程序
    
    ;;
    
    esac
    ```

- 流程控制for循环

    ``` shell
    # 方式一
    for 变量 in 值1 值2 值3…
    
    ​ do
    
    ​ 程序
    
    ​ done
    ```

	---

    ``` shell
    # 方式二
    for ((初始值;循环控制条件;变量变化))
    
    ​ do
    
    ​ 程序
    
    ​ done
    ```

- 流程控制while循环

    ``` shell
    while [ 条件判断式 ]
    
    ​ do
    
    ​ 程序
    
    ​ done
    ```

- read读取控制台的输入

	- read [选项] (参数)- 
	
	- -p：指定读取值时的提示符
	
	- -t：指定读取值时等待的时间(秒)，如果没有在指定的时间内输入，就不再等待了
	
	- 参数：变量：指定读取值的变量名

## 函数

- 系统函数

    - basename：返回完整路径最后/的部分，常用于获取文件名
    
        - basename [pathname] [suffix]
        
        - basename [string] [suffix]
        
        - basename命令会删掉所有的前缀包括最后一个/
        
        - 选项：suffix为后缀，如果suffix被指定了，basename会将pathname或string中的suffix去掉
    
    - dirname：返回完整路径最后/的前面的部分，常用于返回路径部分
    
        - dirname 文件绝对路径：从给定的包含绝对路径的文件名中出去文件名(非目录部分)，然后返回剩下的路径(目录部分)
    
    - 说明：这两个系统函数都不要最后一个/

- 自定义函数

    ``` shell
    function funname()
    
    {
    
    ​ Action;
    
    ​ [return int;]
    
    }
    ```

    调用直接写函数名：funname(不用写括号)，然后在后面写参数
